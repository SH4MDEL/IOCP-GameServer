MMO 게임서버 특징
. 고사양을 필요로 한다.
	- 저사양 PC보다 고사양 PC로 더 많은 동접을 받을 수 있다.
	- 가능한 한 최고 사양의 PC를 사용해서 동접을 올린다.
	- 동접이 올라간다 -> 많은 사용자가 몰려온다 -> 많은 수익을 올린다.
. 고사양 PC
	- Single Core로는 동접 1000도 어렵다
	  . 멀티코어 사용 -> 멀티쓰레딩 필요
	  . 멀티 CPU 사용
	- Memory: 128GB 이상 필요
	  . 모든 World의 정보가 메모리에 올라와야 함.
	- Network
	  . 복수 개의 Network Port 필요
	- 보조 기억장치: 상관없음.
. HW만 좋으면 되는가?
	- 멀티 Core/멀티 CPU
	- 네트워크 프로그래밍
. 하드웨어 지식이 필요한 이유
	- 서버에 걸리는 부하가 많이 때문에 하드웨어의 성능을
	  최대한 끌어내는 프로그래밍이 필요하다.
	- 하드웨어의 성능을 최대한 끌어내려면 하드웨어가
	  어떻게 성능에 영향을 미치는지 알아야 한다.


중요 하드웨어

CPU
	- x86 계열이 대세
	- ARM은 사용 불가

. AMD와 Inter의 2가지 계열이 있다.
	- 서버용 CPU가 따로 존재(Intel Xeon, AMD EPYC)
	- 64bit와 Multi Core
	- 코어 개수, 클럭 속도, Cache 크기, 메모리 Bus 대역폭이 중요
. 서버용 CPU와 일반 Desktop CPU의 차이
	- 서버용 CPU는 Multi Processor를 지원한다.
	- Cache 동기화 지원
	  int를 바꾼다고 치자. 이는 캐시에 저장되어 있기 때문에 다른 CPU가
	  이를 읽는다고 해도 바뀐 값을 읽지 못한다.
	  Cache 동기화를 지원하는 CPU는 캐시 간의 데이터 전송을 지원한다.
	- 서버용 CPU는 서로간의 데이터 전송 전용 통로를 제공한다.
	  AMD: HyperTransport, Infinity Fabric
	  Inter: Quick Path Interconnect, UltraPath Interconnect
	- 메모리 채널 증가: 8개까지

NUMA: CPU끼리 연결되어 있고, 각각의 CPU가 서로 다른 메모리를 관리한다.
UMA: CPU가 메모리 컨트롤러에 연결되어 있고,
	메모리 컨트롤러를 통해 메모리에 접근

. 64비트 이슈
	- 64 비트를 사용한다
	- OS와 Compiler도 64비트 버전을 사용해야 한다.
	- 기존의 32비트 CPU로는 최대 4GB의 메모리밖에 쓸 수 없기 때문에
  	  서버 용량에 제한이 많았었다.
	- 64비트의 경우 16ExaByte의 메모리가 가능하다.
	- 프로그래밍 시 int type과 pointer type의 크기가
	  달라지는 것을 주의해야 한다.

. Multi-processor (Multi-CPU)
	- SMP(Symmetric Multi Processing)
	- 빠른 네트워크 응답속도와 처리 속도 개선을 위해 Multi-processor를 사용
. Multi-core
	- 발열에 의한 CPU의 성능향상 제한을 극복하기 위한 궁여지책
	- 기존의 4~8개의 CPU를 활용하던 프로그램 방식에서 8~64개의
	  Core를 활용하도록 변경 필요.
. Multi-Processor와 Multi-core의 차이점
	- SW적으로는 차이가 없음
	- HW적으로는 메모리 접근 속도 차이 존재

. CPU 발전의 Trend
	- 클럭 속도 증가
	  . 반도체 생산 공정 개선
	  . 물리법칙 한계에 부딪침: 발열
	- 클럭당 수행되는 명령어의 개수 증가 (IPC)
	  . 아키텍쳐의 개선
	  . Pipeline, SuperScalar, SuperPipeline, Out of order
	  . 캐시용량 증가.
	  . 한계에 부딪침: 한계효용의 법칙
	- Core 개수 증가 (2005년~)
	  . 현재의 방식, 프로그램 작성 방식이 바뀌어야 함.
	  . 발열로 인한 클럭속도 향상의 한계가 주 원인
	  . 현재 64-Core까지
. 파이프라인의 발전
	- 
. SIMD 명령어의 발전
	- 하나의 명령어로 여러 개의 실수를 동시에 연산
. 파이프라인의 고도화에 따른 주의
	- 파이프라인을 리셋 시키면 손해가 너무 크다
	- 리셋의 원인
	  . 시스템 콜(printf, scanf, new, delete.. )
	  . 분기 예측 오류(if, switch 자제)
	  . Interrupt, Exception
	- Stall의 원인
	  . Cache read miss
. CACHE
	- 프로그램의 실행속도에 가장 큰 영향을 미치는 요소
	- Cache가 큰 CPU일수록 속도가 빠르다.
. Tip
	- 같이 쓰이게 되는 데이터는 묶어놓는다.
	- 루프 안에서 사용하는 데이터는 캐시에 다 올라올 수 있도록 한다.
	- int 대신에 short나 char를 사용한다.

. Multi Processor Programming
	- 멀티쓰레드 프로그래밍이다.
	- 잘하면 N배 성능향상, 못하면 성능 하락
	- Lock을 줄여라
	  . Lock으로 보호 받는 코드는 N배 성능 향상에서 예외
	  . Lock 자체 부하: 버스 locking
	  . Semaphore, Condition 변수는 시스템 콜(사용 X)
	- Cache Thrashing에 주의하라 (나중에 설명)


Memory
- 서버가 요구하는 용량을 제공하면 된다.
- 일반적인 Desktop용 메모리가 아니라
  Error수정기능이 있는 특수 메모리를 사용한다.
- 대역폭이 크지만 반응속도는 느리다.

Network
- 10M -> 100M -> 1G -> 10G까지 발전
- 서버간의 연결을 위해 한 서버에 여러 개의
  네트워크 카드를 꽂아서 사용하기도 한다.
  . 확장 버스의 대역폭을 고려해야 한다.
  . PCI (32bit, 33MHz) : 133MB/s
  . PCI-Express 2.0 (1 lane) : 500MB/s
- 속도가 더 필요하면 Infiniband 사용

. 서버용 운영체제의 종류
	- UNIX계열
	  . 리눅스, FreeBSD, Solaris, OSx
	  . 가격이 저렴하다.
	  . 유지 보수 관리가 어렵다.
	- Windows 계열
	  . 비싸다.
	  . 유지 보수 관리가 비교적 쉽다.

프로그램 최적화
1. 꼭 필요한 일만 한다.
	- 시스템 호출 최소화(new/delete 포함)
2. 좋은 알고리즘 사용.
3. 메모리 복사 줄이기
	- Call by value 대신 Call by Reference
	- Copy Constructor 사용 회피
4. HW 영향 고려
	- 캐시, 파이프라인
5. 멀티쓰레드 프로그래밍