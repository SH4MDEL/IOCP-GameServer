IOCP

시작
- GetQueuedCompletionStatus를 별도의 쓰레드로 옮기기
- Worker Thread 작성
	. thread::hardware_concurrency()
	. 논리 코어의 개수가 아닌 실제 코어의 개수를 사용한다.
	. 실제 코어보다 살짝 높은 값을 사용한다. 이는 벤치마크를 해보며 판단한다.
- Main함수의 GQCS 루프를 Worker Thread로 이전

문제점
- thread는 별도의 함수이므로 많은 변수를 전역변수로 이전해야 한다.
array < CLIENT, MAX_USER> clients;
또는 unordered_map<int, CLIENT> clients
SOCKET g_s_socket;
HANDLE g_h_iocp; 등 등..

- clients
	. 서로 다른 쓰레드에서 broadcasting 시 접근한다.
	. 즉 Data Race이다.
- g_h_iocp, g_s_socket
	. 멀티쓰레드 시작 전 초기화된 후 변경되지 않는다.
	. 지역변수 유지, Worker Thread에 파라미터로 전달한다.
	. 즉 Data Race가 아니다.

client의 엄청난 Data Race
- 거의 모든 함수에서 clients를 건드림
- clients 컨테이너 자체는 수정되지 않기 때문에 Data Race가 없음
	. 컨테이너의 크기가 변하지 않고, 원소들의 메모리 주소가 변하지 않음
	  (vector와 map이 곤란한 이유)
- 원소의 값에 접근할 때는 여전히 Data Race 존재 => 원소마다 mutex 필요
- 원소의 재사용 문제가 발생, id 재사용 문제도 같이 발생

unordered_map<int, CLIENT> clients
- 엄청난 Data Race
	. 거의 모든 함수에서 clients를 건드림
	. clients 컨테이너 자체가 수정되므로 Data Race 대량 발생
	. 원소들의 메모리 주소는 바뀌지 않음. 하지만 erase시 재사용
	. 원소 내부에 접근할 때도 여전히 Data Race 존재 => 원소마다 mutex 필요
- 해결 방법 #1 : concurrent_unordered_map<int, CLIENT> clients
	. 여러 쓰레드가 동시에 Insert해도 문제가 발생하지 않는다.
	. Erase가 안된다 -> Client를 *Client로 변경 필요 
	. 다른 쓰레드에서 사용중인 CLIENT를 delete하면? 
- 해결 방법 #2 : concurrent_unordered_map<int, atomic_shared_ptr<CLIENT>> clients
	. container의 크기 한계 문제 => 주기적으로 서버 재시작

atomic_shared_ptr을 쓰면 여러 쓰레드에서 한 포인터에 접근해도 문제 x?

SESSION
- int m_id
	. no data race
	. id를 넣으면 수정할 일이 없다.
- EXP_OVER m_recv_over
	. no data race
	. recv 콜백을 처리할 때 사용되는데, 이는 한 쓰레드에서만 사용된다.
- unsigned char m_prev_recv
	. no data_race
	. 패킷버퍼 recv 처리할 때만 접근한다.
- SOCKET m_s
	. no data_race => dara_race
- bool m_inuse
	. data Race
	. 연결되면 true, 접속 끊으면 false
- char m_name[MAX_NAME]
	. data race
	. accept 받을 때 로그인 패킷 받을 때 수정된다.
- short m_x, m_y : data race

- no data race : 한 순간에 오직 한 쓰레드에서만 접근할 때
	-> 두 개 이상의 쓰레드에서 동시에 접근하지 않을 때
- no data race : 값이 정해진 후 다른 아무도 값을 변경하지 않을 때

정책
- mutex로 보호한다.
- atomic operation을 사용한다.
- m_x, m_y는 보호하지 않는다.
	. update는 recv에서만 한다. 다른 쓰레드에서 하지 않는다.
	  다른 쓰레드는 read만 하는데, 그래도 data race이긴 하다.
	  하지만 update를 조금 늦게 본다고 해서 큰 일이 생기지 않는다.
	  성능을 위해 오류를 감수한다.
- m_name의 접근을 m_inuse 이후로 제한한다.
	. Array의 단점: array가 아니면 생성하기 이전에는 접근하는 것이 불가능하다.

클라이언트 객체의 재사용 문제
- m_socket이 DATA RACE가 된다.
	. clients 재사용 시
- 해결책
	. 값이 valid한지를 나타내는 변수가 필요하다.
	  - m_state 변수 추가 필요. (m_inuse 통합)
	. m_state의 의미
	  - ST_FREE
	    미사용, 할당 가능, 접근 금지
	  - ST_ALLOC
	    예약되었음, 사용 불가능, 접근 금지
	    ACCEPT됨. 아직 cs_login 패킷을 받지 못함.
	    게임 컨텐츠의 값들이 의미가 없음. 이 클라이언트는
	    broadcasting에서 제외되어야 함.
	  - ST_INGAME
	    게임 참여 중, 사용 불가능, 접근 가능
		

문제점
- 멀티쓰레드 버그
	. x, y 좌표
- 최적화 필요
	. 너무 잦은 lock
	. 너무 큰 critical section
- id 재사용
	. 오동작의 원인