게임 프로그래밍의 특징
- 게임의 진행 속도는 CPU의 속도가 아니라 실제 시간이다.
- 내가 명령을 입력할 때까지 기다리지 않는다
	. 적어도 렌더링은 계속된다.
- 모든 객체가 독립적으로 행동한다.
	. 게임의 진행이 미리 정해져 있지 않다.


데이터 수신 확인 방법
- 소켓의 모드를 Non-Blocking 모드로 바꾸고 WSARecv를 한다.
	. 데이터가 도착하지 않았을 경우에도 그대로 리턴한다.


"Non-blocking I/O"
- Socket의 모드를 blocking에서 non-blocking으로 변환
- WSARecv() 호출을 즉시 완료할 수 없을 때.
	. 즉 도착한 데이터가 없을 때
	. WSAEWOULDBLOCK 에러를 내고 끝난다.
	. 기다리지 않는다.

그러면 n : 1 온라인 게임의 구현은?
- 클라이언트는 달라지는 것이 거의 없다.
	. 서버가 지시하는 여러 개의 객체를 동시에 그려야 한다.
- 서버가 문제이다.
	. 성능 문제
	. 많은 클라이언트로 인한 잦은 WSARecv 실패
- 효율적인 네트워크 API 호출을 위한 서버용 네트워크 I/O 모델 필요.
	. recv 뿐만 아니라 accept도 고려해야 한다.
	. 멀티쓰레드 고려 필요.

- 단점 : Busy Waiting
	. 모든 소켓의 recv를 돌아가면서 반복 호출해야 함.
	. 많은 실패한 recv
	  -> 잦은 System Call, CPU낭비, 성능 저하


"Socket Thread"
- Thread를 통한 처리
- 다중 소켓 처리 가능
- non-blocking 불필요 => 효율적인 API 호출
- 과도한 thread 개수로 인한 운영체제 Overhead
	. thread 당 오버헤드 : 컨텍스트 스위치, Thread Control Block, Stack 메모리
- Coroutine을 사용한 처리
	. 프로그래밍 방법은 thread-IO와 동일
	. Coroutine API에서 오버헤드 전부 해결
	  - Thread Pool을 사용하여 적은 개수의 Thread로 많은 개수의
	    Coroutine 실행
	. C++20의 coroutine은 초기 단계


"Select"
- Unix시절부터 내려온 고전적인 I/O 모델
- 여러 개의 소켓의 데이터 도착 여부를 하나의 API로 검사
	. 효율적인 API 호출
- 단점
	. socket 개수의 한계 존재
	  - unix: 64, linux: 1024
	. socket 개수가 많아질수록 성능 저하 증가
	  - linear search


"WSAAsyncSelect"	(Select 모델인데 Async(비동기))
- 소켓 이벤트를 특정 윈도우의 메시지로 받는다. (wMsg)
- 클라이언트에 많이 쓰임
	. (쓸데없이) 윈도우 필요. 
	. 윈도우 메시지 큐를 사용 -> 성능 느림
	. 그러나 클라이언트는 큰 상관없음(어차피 씀)


"WSAEventSelect"
- 윈도우를 쓰지 않는 버전의 AsyncSelect
- 소켓을 Event와 엮는다.
이벤트란?
- 운영체제가 관리하는 플래그
- 세마포어나 컨디션변수와 비슷
- 운영체제가 응용프로그램에게 어떠한 EVENT가 발생했음을 알리는 용도로 사용
- 응용프로그램은 EVENT가 true가 될 때까지 실행을 멈출 수 있음 (CPU낭비 없이)
	. 이 때 여러 개의 이벤트를 하나의 명령으로 대기할 수 있음.

- 소켓의 개수 64개 제한
	. 멀티쓰레드를 사용해서 제한 극복 가능
 

"Overlapped I/O"
- Windows에서 추가된 고성능 I/O 모델
- 이름이 뭔가 이상. Asynchronous I/O (비동기 I/O)
- 대용량 고성능 네트워크 서버를 위해서는 필수 기능
- IOCP도 Overlapped I/O를 사용
- 사용 방법이 select style의 I/O 모델과 다르다.
	. select <- 함수의 요청과 종료가 한 몸
	. I/O 요청을 먼저 하고, I/O 종료를 나중에 확인한다.
	  - 요청 후 즉시 리턴
	  - Non-blocking과는 다르게 거의 실패하지 않는다.
	. I/O 요청 후 기다리지 않고 다른 일을 할 수 있다. (Asynchronous)
	. 여러 개의 I/O 요청을 동시에 할 수 있다. (Overlapped)

- 장점
	. Buffer Search가 적다.
	. Linear Copy가 없다.

- 소켓 내부 버퍼(커널 버퍼)를 사용하지 않고
  직접 사용자 버퍼에서 데이터를 보내고 받을 수 있다. (옵션)
- 그러나 안 쓴다. (Network Bandwidth)

Non-Blocking I/O와의 차이
- I/O 호출과 완료의 분리
	. Non-Blocking I/O는 실패와 성공이 있고 거기서 끝, 뒤끝이 없음
- I/O 다중 수행, Network Data Copy 감소


사용법
connect, send : 똑같다.
WSASocket
WSARecv	

Overlapped I/O Callback 모델
- 누가/언제 Callback을 호출하는가?
- 멀티쓰레드로 동시에 Callback이 실행되는가? No
- 운영체제가 실행중인 프로그램을 강제로 멈추고 Callback을 실행하는가? No
- 프로그램이 운영체제를 호출하고 대기중일 때, 운영체제에서 실행을 요청한다.
	. 운영체제를 호출하는 프로그램에서 호출에 대한 응답인지
	  Callback 실행 요청인지를 판단해야 한다.
	. 모든 운영체제 호출이 Callback을 검사하지 않는다.
- Callback을 사용한 프로그램의 구조
	. 할 일이 있으면 하고, 없으면 SleepEx를 호출한다.


에러 처리시
- WSASend/WSARecv는 항상 오류를 리턴한다.
- 이 때, Error값이 WSA_IO_PENDING이면 정상적으로 등록 된 것이다.

"다중접속 Echo Server"
- 클라이언트는 변경할 내용이 없다.
- 서버에서 여러 개의 접속을 유지해야 한다.
	. 여러 개의 소켓과 그 소켓에 대한 정보(추가 데이터)가 필요
	. 이러한 정보를 세션(SESSION)이라고 많이 부름
	. unordered_map으로 구현

다중 접속 Accept
- 다중 접속 서버는 Recv와 Accept를 동시에 실시해야 한다.
- 비동기(Overlapped)에서는 간단히 해결 가능하다.
	. 무한루프 돌면서 Accept를 받는다.
	. Accept를 받으면 recv를 실시한다 (콜백)

Overlapped I/O 사용 시 주의
- Callback 함수에서 어떤 소켓의 Callback인지 판단이 필요.
	. 함수 내부의 Overlapped 구조체 인자를 통해 판단한다.
	. (ex: Overlapped 구조체의 hEvent 항목에 소켓 값을 넣는다.
	. (ex: Overlapped 구조체의 주소를 socket값으로 해싱하는 자료구조 관리)
	. Overlapped 구조체에 주소 등 필요한 정보를 이어 적는다.
- Send/Recv에서 사용하는 Overlapped 구조체는 독립적으로 사용해야 한다.


"다중접속 Chatting Server"
- 클라이언트에 다른 클라이언트의 메시지도 전달해 주어야 한다.
- 메시지에 클라이언트 ID도 넣어 주어야 한다.
	. 전송 데이터의 Packet화
	. Packet 단위로 Send/Recv가 되어야 한다.
- 더 이상 send와 recv가 차례로 호출되지 않는다.
	. 정해진 순서가 없고, 동시 다발적으로 발생한다.
	. Send_callback에서 더 이상 recv를 호출하지 않는다.
- Send/Recv가 더 이상 OVERLAPPED, WSABUF, BUF를 공유할 수 없다.
	. 완료를 기다리지 않고 send가 비동기적으로 실행됨.