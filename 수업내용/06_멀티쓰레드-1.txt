게임서버에서 가장 중요한 것
- 안정성
	. 멀티쓰레드를 하면 안정성이 떨어진다.
	. 멀티쓰레드를 잘 해서 안정성을 유지하자
- 성능


멀티쓰레드
- 하나의 프로그램의 여러 곳이 동시다발적으로 실행되는
  프로그래밍 기법
- 최근 가장 많이 사용되는 병렬처리 프로그래밍 기법

병렬처리
- 하나의 작업을 여러 개의 콘텍스트에서 동시 수행하는 것
	. 콘텍스트: CPU의 실행 상태

왜 병렬처리를 하는가
- 한 개의 CPU의 처리속도가 너무 느리기 때문

프로세스와 쓰레드
- 프로세스: 실행 중인 프로그램
- 쓰레드: 프로그램 실행의 프름
	. 프로세스 실행 중 프로그램이 쓰레드 생성 명령 실행

	. 프로그램은 하나의 프로세스가 되어서 실행된다.
	. 처음에는 하나의 쓰레드로 실행
	. 쓰레드는 다른 쓰레드를 만들 수 있다.
	. 각각의 쓰레드는 자신의 스택을 가지고 있고
	  같은 프로세스의 모든 쓰레드는 data와 code, heap을 공유한다.
	  쓰레드가 늘어나면 스택의 개수도 증가한다.

멀티쓰레드
	. 콘텍스트가 여러 개 있다.
단일 쓰레드 프로그램은 PCB(Process Control Block)을 하나 가지고 있다.
멀티 쓰레드 프로그램은 PCB 내에 TCB(Thread Control Block)을 여러 개 가지고 있다.

멀티쓰레드에서의 메모리 접근
- 메모리
- 전역변수(data): 모든 쓰레드가 공유한다.
- 지역변수(stack): 쓰레드마다 따로따로 존재한다.
- 지역변수도 강제로 공유할 수 있다.
	. 지역변수의 주소를 전역변수에 저장하면 된다.
	. 그러지 말자

멀티쓰레드에서의 자연 공유
- 모든 자원(메모리, 파일 핸들, 윈도우 핸들 등)은 공유된다.

장점
- 성능 향상
- 빠른 응답 속도
- 더 나은 자원 활용(CPU Core)
- 멀티프로세스 프로그램보다 효율적
	. 통신
	. context switch

위험
- 프로그램 복잡도 증가
- 디버깅의 어려움 (data race, deadlock)


두 종류의 프로그래밍 스타일
- Heterogeneous
	. 작업을 역할 별로 나누어서 전용 쓰레드에게 맡기는 스타일
- Homogenous (event driven, data driven)
	. 작업을 쪼개서 쓰레드 구분 없이 나누어 하는 스타일
게임 서버는 Homogenous
	. 패킷 하나를 한 조각의 작업으로 생각
	. 동접 5000이면 최대 5000개의 조각
게임 클라이언트는 Heterogeneous
	. 렌더링 쓰레드, 물리 엔진 쓰레드, 장면 구성 쓰레드

주의점
- 쓰레드의 개수가 많다고 좋은 것이 아니다.
- 프로세서/코어의 개수에 맞추어라
	. 코어보다 많은 쓰레드 -> 컨텍스트 스위치 부하. 반응속도 저하
- 너무 많은 쓰레드 => 운영체제 및 하드웨어에 부담

- 내가 사용하는 메모리의 내용이 내가 아닌 다른
  쓰레드에 의해서 변경된 수 있음을 유념해야 한다.
	. DATA RACE라고 부름

mutex 함수가 아니라 mutex 객체가 필요한 이유
- 서로 동시에 실행돼도 괜찮은 Critical Section이 있으면
  서로 다른 mutex 객체로 보호하는 것이 성능이 좋다.

lock 사용 시 주의점
- lock의 부하
	. lock 호출 자체가 상당한 부하를 유발한다.
	. 호출한 코어 뿐만 아니라 다른 코어와 다른 CPU에도 delay를 발생시킨다.
- lock의 크기 (임계영역의 크기)
	. 너무 작다: lock이 자주 호출되어 성능 저하가 심해진다.
	. 너무 크다: lock을 얻지 못해 오랫동안 대기하는 쓰레드로 인한
	  성능 감소가 커진다. 병렬성이 떨어진다.

Thread 여러 개로 성능 향상
- 올바른 결과가 나와야 함
- Single Thread 프로그램보다 빨라야 함.

alignas(64)
- 숫자 만큼 메모리를 차지하도록 변수를 선언한다.