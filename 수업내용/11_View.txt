게임 서버 구현

Standalone 게임과 무엇이 다른가
- 동접
	. stand-alone 게임은 동접이 1인 게임
	. MMO는 동접이 수천
- 각각의 플레이어의 행동이 다른 플레이어에게 전달되어야 한다.
	. Broadcastring 필요

비용 문제
- 오브젝트들의 상태변경을 모든 플레이어에게 보여주는 것
- 동접 N일 때 N*N의 패킷 필요
	. 1초에 1번 이동
	. 동접 5000 -> 25M packet/sec
	. 1000 CPU cycle per packet -> 25GHz 필요
- 해결
	. 근처의 Object만 보여준다.

효율적인 검색, 최적화
- Zone (용어는 게임마다 다름)
	. 효율적인 검색의 기본
	. 전체 월드를 큰 논리적인 단위로 쪼개기
	  - 차원이 다르거나, 바다가 가로막고 있거나..
	  - Seemless 하지 않아서 이동 시 로딩이 필요
	. 대륙, 월드, 인던
	  - 서로 볼 일이 절대 없음
- Sector
	. Zone도 너무 크다. 더 줄이자.
	. Cluster라고도 함

Sector 구성
- Sector는 서버 내부에서 검색 효율성을 위해 도입한 개념
	. 자기 주변에 있는 Object 리스트를 빨리 얻어내기 위해 사용
	. Sector의 크기는 최대 시야에 비례한다.
	  - 즉 적당한 개수의 Sector 검색으로 시야 범위 내에 모든 Object를 찾을 수 있어야 한다.
	  - 너무 크면 : 시야 범위 밖의 개체가 많이 검색됨
	  - 너무 작으면 : 많은 Sector를 검색해야 한다.
- 클라이언트와는 아무런 상관이 없는 개념이다.
	. Sector마다 Sector에 존재하는 Object의 목록을 관리하는 자료구조가 존재한다.
	  - 멀티쓰레드 자료구조 필요
- 모든 플레이어는 시야라는 개념을 갖고 있다.
	. 시야 밖의 Object에 대한 정보는 클라이언트에 전송되지 않는다.
	. 서버 성능 향상 및 네트워크 전송량 감소에 많은 도움을 준다.
- 모든 Object의 이동 시 시야 정보를 업데이트 해주어야 한다.
	. View List라는 객체를 모든 플에이어가 관리한다.
	. View List는 클라이언트 측의 객체의 
	  생성(Enter Object)과 소멸(Remove Object)의 기준이 된다.
	. 단순히 거리만으로 판단할 경우 서로 동시에 움직이므로 enter와 remove가
	  어긋날 수 있다.

이동 시 시야처리
- 시야 리스트 업데이트
- 시야에서 사라진 플레이어에게 leave_obj 전송
- 새로 시야에 들어온 플레이어에게 enter_obj 전송
- 계속 시야리스트에 있는 오브젝트에게 move 전송

이동 시 시야처리 순서
- Sector 검색 후 Near List 생성
- Near의 모든 객체에 대해
	. View List에 없으면
	  - View List에 추가
	  - 나 <- Put Object (상대)
	. 상대 View List에 있으면
	  - 상대 -> Move Object (나)
	. View List에 있으면
	. 상대 View List에 있으면
	  - 상대 -> Move Object (나)
	. 상대 View List에 없으면
	  - 상대 View List에 추가
	  - 상대 -> Put Object (나)
- View List에 있는 모든 객체에 대해
	. Near에 없으면 Remove ID List에 추가
	. Near에 있으면 -> 아까 처리함
- Remove ID List의 모든 객체에 대해
	. View List에서 제거
	. 나 <- Remove Object (상대)
	. 상대 View List에 있으면
	  - 상대 View List에서 제거
	  - 상대 <- Remove Object (나)

시야 리스트(ViewList)
- 클라이언트에서 보여주고 있는 객체의 리스트

view list 최적화
- mutex를 이용한 상호배제는 심한 성능 제한
- 이동 시 상대방의 view list를 조작하지 않는다.
- 대신 상대방에게 접근/이동/이탈을 메시지로 보낸다.
- 상대방은 메시지를 받아서 자신의 view list를 업데이트
- mutex가 필요 없어진다.
- non-blocking concurrent queue가 필요

섹터 분할