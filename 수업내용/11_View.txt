게임 서버 구현

Standalone 게임과 무엇이 다른가
- 동접
	. stand-alone 게임은 동접이 1인 게임
	. MMO는 동접이 수천
- 각각의 플레이어의 행동이 다른 플레이어에게 전달되어야 한다.
	. Broadcastring 필요

비용 문제
- 오브젝트들의 상태변경을 모든 플레이어에게 보여주는 것
- 동접 N일 때 N*N의 패킷 필요
- 해결
	. 근처의 Object만 보여준다.

효율적인 검색, 최적화
- Zone (용어는 게임마다 다름)
	. 효율적인 검색의 기본
	. 전체 월드를 큰 논리적인 단위로 쪼개기

이동 시 시야처리
- 시야 리스트 업데이트
- 시야에서 사라진 플레이어에게 leave_obj 전송
- 새로 시야에 들어온 플레이어에게 enter_obj 전송
- 계속 시야리스트에 있는 오브젝트에게 move 전송

이동 시 시야처리 순서


시야 리스트(ViewList)
- 클라이언트에서 보여주고 있는 객체의 리스트

view list 최적화
- mutex를 이용한 상호배제는 심한 성능 제한
- 이동 시 상대방의 view list를 조작하지 않는다.
- 대신 상대방에게 접근/이동/이탈을 메시지로 보낸다.
- 상대방은 메시지를 받아서 자신의 view list를 업데이트
- mutex가 필요 없어진다.
- non-blocking concurrent queue가 필요

섹터 분할