스크립트
- 사용 목적: 게임 제작 파이프라인 단축
	. 프로그래머의 개입 없이 기획자가 직접 작성/Test
	. 서버 리부팅도 필요 없게

적 자동 인식
- 몇 되지 않는 능동적 AI
- 능동적 AI
	. 플레이어에 의하지 않는 자발적 동작
	. 서버에 막대한 부하 절대 피해야 함
	  - NPC 개수 10만

서버 부하가 막대하므로 능동적 AI를 구현하지 않고
수동적으로 구현한다. 근처에 왔을때만 어그로가 동작한다.


NPC 구현
- NPC 서버를 따로 구현하는가?
- NPC 서버 구현의 장점
	. 안정성: NPC 모듈이 죽어도 서버 정상 작동
	. 부하 분산: 메모리 & CPU
- NPC 서버 구현의 단점
	. 통신 오버헤드
	  - 공유메모리 참조로 끝날 일이 패킷 통신으로 악화
	  - 서버 입장에서는 NPC도 플레이어와 비슷한 부하

NPC의 이동
- NPC의 이동은 서버에서 관할한다.
	. 해킹 방지
- 장애물 인식 필요
	. 서버에 지형과 장애물 정보가 있어야 한다.
- 지형 구현과 장애물
	. 2D?, 3D?
	. Tile?, Polygon?

지형 구현
- 클라이언트만의 문제가 아니다
- 비주얼로 끝나는 것이 아니다.
- 서버가 지형을 인식해야 한다.
	. NPC의 이동 구현을 위해
	. 플레이어 해킹 방지(벽 뚫기)
- 클라이언트가 가지고 있는 모든 데이터를 서버에 복사하는 것은 과부하
	. NPC의 이동에 필요한 정보만 있으면 된다.
	  . 클라이언트도 같은 정보 필요 -> 아바타 이동에 사용
	. 충돌, 높이
- 서버에서만 지형충돌을 검사하면 되는가?
	. 클라이언트에서도 Avatar 이동 시 지형 충돌 필요
	  - 서버에서의 검사 결과는 네트워크 딜레이가 있다.
	  - Avatar의 이동은 즉시 이루어져야 한다. (UI 반응속도 문제)
	    클라이언트에서 지형 충돌 검사와 이동을 Delay없이 처리해야 한다.
	  - 해킹 시도(벽 뚫기) 차단은 사후 검증을 하면 된다.
	  - 이렇게 하면 서버의 랙이 심한 경우에도 이동만은 렉 없이 할 수 있다.
	  - 서버에서 Avatar 클라이언트로 보내는 이동 패킷을 생략할 수 있다.
	  - 잘못된 이동 시
	    해킹 : 강제 로그아웃, 계정 영구 정지
	    오동작 : (문 닫힘 delay, 지형 버그) 클라이언트에 Roll-Back 패킷 전송
	. 이동 뿐만 아니라 아이템 집기나 화살 겨냥에도 장애물 검사 필요
	  - 서버에서 거부하기 전 일차적으로 패킷 낭비 없이 오동작 원천 차단
	  - UI 반응 속도 개선


2D와 3D 게임의 난이도 차이
- 크다.
- 메모리 용량과 검색 속도 둘 다 중요
	. 메모리 용량
	  - 지형의 정밀도를 결정
	  - 지형의 밀도가 균등하지 않음 (특히 3D)
	. 검색 속도
	  - N = 지형 데이터의 크기 = 면적 X 복잡도
	  - 검색 속도 = O(1), O(N), O(logN), O(N^2)
	  - 서버 부하 = O(검색 속도 X 동접)
	. 메모리 용량 vs 정밀도 vs 검색 속도는 서로 Trade Off

2D 지형
- Tile 방식
- 2D 배열로 지형 표현
	. bool can_move[WORLD_WIDTH][WOLRD_HEIGHT];
	. bitfield를 사용하여 캐시 적중률 향상
- 이동 가능, 불가능 flag가 cell마다 존재
- 서버 안에서의 모든 Object의 좌표는 정수
- 자로 잰듯한 줄서기(만) 가능
- 2D 이미지를 토대로 사람이 tile을 작성
	. 주로 레벨디자이너

3D 지형
- 다층 지형을 위해 필요
	. 건물의 2층, 복잡한 던전, 다리
- 이동 시 높이 검사 필요
	. 이동 가능 경사
	. 머리 부딪힘 검사
- 2가지 방식이 있음
	. 확장 타일
	. Polygon
- 충돌 검사용 데이터 자동 생성 필수

3D 지형 확장 타일 방식
- Tile 방식
- 3D 배열로 지형 표현
	. 배열 구현 시 메모리 낭비가 심하므로 Sparse Matrix로 표현
	  - 2D 지형을 기본으로 일부분만 3D로 표현
	. 여러 개의 2D 타일로 다층 구조 표현
	  - 이동 가능 정보 이외에 높이 정보도 포함
	  - 복잡한 입체 구조 표현 어려움
	. 서버 안에서의 모든 Object의 좌표는 실수
	  - 3D 게임에서의 정수 좌표는 비주얼적으로 너무 어색

3D 지형 폴리곤 방식
- 클라이언트의 Visual Data를 그대로 사용
	. 1차 가공을 통한 단순화 필요
	  - 삭제 : 노말 벡터, uv값, 텍스처..
	  - 삭제 : 통과 가능한 Object (풀, 안개, 커튼..)
	  - 평면 폴리곤들의 병합
	. 어차피 최신 클라이언트들은 Collision Polygon 따로 요구
	. 의외로 메모리 사용량은 확장타일과 큰 차이가 없음.
- 클라이언트와 비슷한 방법으로 이동 가능 검사
	. 물리 엔진 필요
	. 지형 표현 정밀도 증가
- 정수 좌표 불가능
- Tile 방식에 비해 속도는 떨어지지만 확장성 증가

장단점
- 2D 타일
	. 압도적인 속도, 메모리 절약
	. 3차원 지형 불가
- 2D 타일 확장
	. 빠른 속도
	. 복잡한 지형 표현 불가
- 폴리곤
	. 느린 속도
	  - 물리엔진 사용 필요
	  - 3D 게임엔진의 Dedicated Server 모드 사용 가능 -> 서버 부하 대폭 증가


길찾기
기본 길 찾기 방식
- 다음 Step의 위치 정하기
	. 단위 시간에 갈 수 있는 직선상의 위치
	. 다음 Tile : 단위 시간이 가변
	. 방향 전환 점
- Step이 필요한 이유
	. 패킷 개수 절약, 계산 시간 절약 -> Timer를 통한 이동
- 매 Step마다 다시 길 찾기 필요
	. 목표 이동, 지형 변화, 장애물 변화
- 길찾기의 단위 (길 찾기 알고리즘의 단위)
	. Tile
	. Node

길 찾기 알고리즘
- 단위 : 길 찾기 알고리즘은 기본적으로 그래프 최단 경로 검색
	. 그래프의 노드가 무엇인지 정의 필요
	. Tile 혹은 미리 찍어놓은 좌표들
	. Weight를 줄 수도 있음
	  - 경사, 이동속도를 느리게 하는 장애물

길 찾기 알고리즘의 종류
- 가면서 찾기 (path-finding on move)
	. 지형 전체를 알 수 없는 경우
	  - 마이크로 마우스 미로 찾기
	  - 멍청한 NPC
	  - 빠른 계산
	  - 장애물이 거의 없는 경우
	. 다른 경로점
	  - 랜덤
	  - 장애물 따라 돌기
	  - 직선 찾아 돌기
- 미리 찾기
	. Dijkstra
	. A*


NPC AI
컨텐츠의 핵심
- MO와의 차이

- 타이밍에 맞춘 동작들 구현
	. 이동, 마법 시전, HP 회복
	. 캐스팅 타임, 쿨타임
- NPC AI
	. Timer 기반의 Finite State Machine
	. 주기적으로 상황 파악. (그러나 현실은..)

구현
- AI Code를 어디서 실행하는가?
	. main? WorkerThread? AIThread?
- 어떻게 구현하는 것이 효율적인가?
	. 워낙 단순하기 때문에 코드의 길이를 줄일 수는 없다.
	. 하지 않아도 되는 코드 실행 없애기

예제
- DO A -> 1초 Delay -> Do B
- 1초마다 Heal
- 1초에 1번 랜덤 무브 

- 10만개의 NPC가 충돌하면?
	. 매 루프마다 10만번의 if문이 필요
	  - 실제로는 NPC마다 여러 개의 if가 필요 (move, heal, attack..)
	  - Busy Waiting
	. 캐시 문제, pipeline stall

해결책?
- NPC 클래스에 Heart_beat 함수를 두고 일정 시간 간격마다 호출되게 한다.
	. 모든 NPC AI가 일정 시간 간격마다 실행

Hear_beat 함수
- 자율적으로 움직이는 모든 NPC를 살아있도록 하는 함수
- 외부의 요청이 없어도 독자적으로 AI 실행
- 구현
	. HeartBeatThread

문제
- 10만개의 NPC라면?
	. Busy Waiting은 줄였지만 아무 일도 하지 않는다 heart_beat이 시간을 잡아먹는다.

해결
- 필요한 경우에만 heart beat이 불리도록 한다.
	. 복잡한 NPC의 경우 프로그래밍이 어려워 진다
	  - Heart beat 함수 안의 수많은 if
	  - 불리지 않는 경우를 판단하기가 힘들다.

Timer Thread와 Worker Thread의 연동
- Timer Thread에서 할 일
	. 모든 AI
	. 이동, 길찾기 등
- Timer Thread의 과부하 -> 서버 렉
- 실제 작업은 Worker Thread에 넘겨야 한다.

이벤트 큐
- 저장 정보
	. 어떤 오브젝트가 언제 무엇을 누구에게 해야 하는가
	. 타이머 쓰레드가 큐에서 이벤트를 꺼내서 활성화

