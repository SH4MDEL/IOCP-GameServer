선수 과목
. BD: SQL 기초


MMO 게임
. 많은 사람이 모여서 생활하고 투쟁하는 가상공간

Client/Server 게임
. 모든 게임 컨텐츠의 실행이 서버에서 이루어짐
. 클라이언트는 단지 그래픽 정보 표현과 사용자 입력 전달만 담당
. 해킹에 매우 강함.
	- 현재는 Cheating 방지를 위해 C/S로 많이 구현

MO (Multiplayer Online)
. 한 세션에 여러 명이 모여서 게임을 진행
. 세션이 끝나면 게임 월드와 플레이어 정보 리셋
. P2P로도 구현 가능

MMO (Massively Multiplayer Online)
. 게임의 단위가 서버
. 같이 플레이하는 플레이어의 단위가 몇 천명
. 게임 월드와 플레이어 정보를 DB에 계속 유지
. Event 발생 시에만 데이터 전송
	- 이동 또한 약 1초 간격으로 전송. 띄엄 띄엄 보내면서 동기화

동접자 수/월드
. 게임의 재미에 큰 영향
. 시골 서버와 도시 서버
. 서버의 성능이 좋아야 하는 이유

HotSpot
. 이벤트, 공성전, 길드전, 레이드 등
. HotSpot을 얼마나 잘 견디느냐

게임서버 제작 시 고려점
. 안정성: 서버 다운 방지
	- 원인: 멀티쓰레드 버그
	- 해결책: 유능한 프로그래머 고용
. 보안
	- 게임 서버를 만드는 이유
	아이템 복사, 해킹 방지
. 성능
	- 동접자 수와 HotSpot 허용량으로 평가
	  . 허용량: 랙이 걸리지 않는 최대 동접 수치
	  . HotSpot: 동시에 많은 인원이 모이는 장소
	- 개선을 위한 고려사항
	  . 부하 분산: 서버 분할, World 분할, 인스턴스 던전
	  . 알고리즘 개선
	  . 멀티코어 활용
	  . 오버헤드 감소(스레드 동기화 최소화, 캐시 적중률 향상, 데이터 복사 감소)
. 네트워크 부하
	- HW 한계
	- IDC 한계
	- 서버/클라이언트 프로토콜 설계 시 주의점
	  . 가능한 적은 양의 데이터 전송
	  . 가능한 적은 회수의 데이터 전송
. 확장성
	- 성능을 쉽게 올릴 수 있는가?
	  . 플레이어 사이의 인터랙선이 가장 큰 문제(N^2로 증가)
	  . CPU속도 한계 극복 필요: 멀티코어 + 멀티CPU
	  . 분산 구조 => 구현 난이도 대폭 증가
		- 분산 가능한 것은 무조건 분산 구현
		  . 분산 불가능한 것 == 분산 시 오히려 성능이 저하되는 것	
		- 네트워크 오버헤드가 가장 큰 문제
. 네트워크 딜레이 은폐
	- 중간 router 딜레이
	- 거스를 수 없는 자연 법칙(특수 상대성 이론)