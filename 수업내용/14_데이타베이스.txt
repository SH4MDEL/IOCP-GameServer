데이타베이스
- 정의
	. 구조화된 데이터나 레코드의 모임
	. 컴퓨터에 저장
	. 쿼리(Query)를 사용하여 프로그램에서 접근 가능

- 종류
	. Hierarchical model
	. Relational model
	  - DB2, Oracle, MySQL, MSSQL
	. Object model

게임에서 많이 사용되는 DB
- CISAM (C indexed Sequential Access Method)
	. DB가 아닌 단순한 파일 시스템
- MySQL -> Maria DB
	. Free Software
	. Simple but fast, 리눅스 운영체제에서 많이 사용
- MSSQL
	. Microsoft, 한국에서 가장 많이 사용
- Oracle
	. 비싸다. 수출이 어렵다
- Memory DB
	. 고속 자료처리 가능, memcached
- NoSQL
	. 자료의 분산, Cloud에 특화, Transaction 처리 곤란
	. HBase, mongo-db, Redis

왜 Data를 보조 기억장치에 저장하는가?
- 데이터의 크기
	. 서버 프로그램이 모든 데이터를 다 메모리에 갖고 있을 수 없다.
- 데이터 보존
	. 서버가 종료되어도 게임 데이터가 남아 있어야 한다.

왜 DB를 사용하는가 : 안정성과 효율성
	. 상용 데이터베이스보다 데이터 관리를 더 잘하는 프로그램을 짤 수 있는가

DB를 쓰면 좋은 점
- 다른 프로그램으로도 데이터를 다룰 수 있다.
- 각종 툴이나 Browser를 사용할 수 있다.

DB의 단점
- 잘 모르는 Black-box
	. 잘 모르는 상태에서 사용하면 풀기 어려운 예기치 않은 문제를 만날 수 있다.

필수 구현 요소
- 저장소 : 하드디스크, SSD, 메모리
	. 인덱스를 통한 고속 검색
- 트랜잭션과 동시성
- 복제
	. 안정성, 부하 분산
- 보안

데이터 베이스의 접속 및 사용
- 네트워크를 통한 접속
	. Text Based Socket
	. ODBC
- 쿼리 언어
	. 자료 검색 / 업데이트부터 Table 생성, 소멸
	. SQL, QUEL, OQL

데이타베이스에 저장되는 데이터
- 과금 정보
- 캐릭터 정보
- 아이템 정보
- 월드 정보
	. 성주, 집주인, 대회 우승 기록, 게시판, ...
- 경매장 정보
- 우편 정보
- 게임 로그 (단순히 저장만 하고 다시 읽지 않음)
	. 상거래, PK, 채팅, 아이템 습득/사용
	. 파티, 레이드원 정보
	. 보스 드랍 아이템 기록

데이타베이스에 저장되지 않는 데이터
- 서버 재부팅 때 초기화 되는 정보
	. 몬스터의 위치, 몬스터의 HP, 바닥에 드랍된 아이템
- 게임 플레이 중에 변경되지 않는 정보
	. 파일로 저장되고, 서버 부팅 시 메모리에 모두 로딩된다.
	. 예)
	  - 지형 데이터
	  - 몬스터 배치, 드랍 테이블
	  - Quest Script, AI Script, Skill Tree

서버는 언제(얼마나 자주) DB에 접근하는가?
- 필수
	. 캐릭터 login/logout
	. 서버 shutdown/booting
- 추가적 : "비정상적인 서버다운에도 안전하게!"
	. 그때그때 : 캐릭터 사이의 아이템 거래
	. 주기적 : auto - save
	  - 중요도와 주기는 반비례
	. 그 이외
	  - 중요한 캐릭터 데이터 변경
	  - 캐릭터의 zone 이동 시

게임서버에서 DB를 사용할 때의 문제점
- DB 접근은 처리에 시간이 걸린다.
- Blocking API (데이터가 올 때 까지 멈춰 있음)
- 게임서버는 클라이언트 패킷에 Read time으로 반응해야 한다.

해결
- DB 접근과 게임 메인 쓰레드의 분리
	. DB 접근 Thread
	. DB 접근 Process
	  - Cache Server, Query Server

분리의 효과
- 분리 전
	. DB 업데이트 요청 -> DELAY -> DB 업데이트 응답 - 인벤토리 업데이트
- 분리 후
	. 아이템 수집 패킷 -> 패킷 프로세스 -> DB 업데이트 이벤트 생성 -> 끝
	. DB 업데이트 이벤트 POP -> DB 업데이트 요청 -> 응답 -> PQCS
	. GQCS -> 인벤토리 업데이트 -> 패킷 전송

DB 접근(트랜잭션) Thread
- DB 접근을 위한 thread를 따로 돌림
- Worker Thread에서는 DB 트랜잭션으로 인한 delay가 없음
- DB 관련 event의 정의가 필요
- Multiple write / Single read concurrent queue가 필요

DB 접근(트랜잭션) Process
- DB 접근을 위한 프로그램을 따로 돌림
- Game Server에서는 DB 접근으로 인한 Delay가 없음.
- Process간의 Communication overhead가 있음.
- DB 관련 Protocol의 정의가 필요
- 다른 컴퓨터에서 수행 가능
	. 부하와 메모리 사용 분산
	. Cache Server / Query Server로 불리기도 함.

ODBC (Open DataBase Connectivity)
- C++에서 SQL을 사용하기 위한 표준

Stored Procedure (내장함수)
- Stored Procedure를 사용하지 않고 SQL을 직접 사용하는 것은 죄악
- 일련의 동작들을 SQL로 프로그래밍 해서 DB서버에 저장해 놓은 것
- 장점
	. 성능 향상 : Pre Compile, Pre Scheduling
	. 보안
	. Transaction 구현
	. 네트워크 트래픽 감소
- 사용법
	. EXEC proc_name
