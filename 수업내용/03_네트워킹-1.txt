네트워크
- Routing
- Domain Name
- TCP/UDP
- IPv4/IPv6

인터넷은 4개의 레이어로 구현된다.
6개짜리는 아무짝에도 쓸모 없다.
- Application
	. 우리가 작성하는 프로그램, 게임 클라이언트, 게임 서버
- Transport
	. Application에 데이터를 전달해 주는 API
	. TCP, UDP
- Network
	. 주소를 보고, 컴퓨터(목적지)까지 안내해 주는 시스템
	. IPv4, IPv6
- Data Link
	. 컴퓨터와 컴퓨터를 연결하는 물리적인 규격
	. Ethernet, PPP, FDDI, LTE/5G, WIFI
각각의 레이어마다 헤더를 붙여 데이터의 정보를 확인하게 한다.
포장지를 붙인다.


패킷
- 인터넷 표준에서의 패킷
	. 레이어에서 다루는 데이터의 단위
	  - 레이어마다 한번에 다룰 수 있는 데이터의 최대 크기가 있음.
	. 각 레이어에서 필요한 정보가 추라됨(헤어)
	. 패킷은 독립적이어야 함. 
	  앞/뒤의 데이터를 보지 않아도 전달할 곳을 알 수 있어야 함.
- Application에서의 패킷
	. 구분을 위해 다른 이름으로 부르는 사람도 많음 (메시지, 데이터 블록..)
	. 구현의 편의를 위해 프로그래머가 나누어 놓은 데이터의 단위
	. 패킷은 독립적이어야 함.
	  앞/뒤의 데이터를 보지 않아도 전달할 곳을 알 수 있어야 함.

MMO 패킷의 특징
- 종류가 많다
	. 이동, 아이템사용, 평타, 채팅, 몬스터 공격, 경매
- 다음에 어떤 패킷이 올지 알 수 없다.
	. 모든 패킷을 한번씩 순서대로 보낼 수 없다.
- 패킷마다 크기가 다 다르다.
	. 제일 큰 패킷의 크기로 통일하면 => 네트워크 낭비
- 따라서, 패킷을 받았을 때 패킷의 종류와 크기를 알 수 있어야 한다.
	. 패킷 맨 앞에 크기와, 종류를 먼저 적어야 한다.
	. 종류뿐 아니라 크기도 알아야 하는 이유 => 채팅

프로토콜
- 클라이언트와 서버가 주고 받는 데이터의 포맷과 순서를 정의
- 패킷 포맷 정의가 핵심
- MMO에서 수많은 종류의 Packet이 존재
	. 로그인, 캐릭터 선택, 이동, 아이템 사용, 채팅, 평타...
- 주의점: 수정은 클라이언트와 서버가 동시에 이루어져야 한다.

프로토콜 정의 방식
- Binary Format
	. Byte 단위로 값의 의미를 정의
	. 관리가 까다로움, 언어/운영체제/컴파일러에 구애받지 않음.
	. Endian만 주의하면 됨.
- Structure Format
	. C의 구조체를 정의해서 공유
	. 관리가 쉬움, 언어/운영체제/컴파일러에 구애받는다.

패킷 재조립
- 인터넷 표준에서의 패킷 ≠ Application에서의 패킷
- 100바이트 + 100바이트 + 100바이트를 보냈을 때
  상대쪽에서 어떠한 조합으로 도착할지 알 수 없다.
	. 받는 쪽에서의 패킷 재조립이 필요하다.


소켓 프로그래밍

기본은 두 개의 프로그램이 서로 데이터를 주고받는 것
- 두 개의 프로그램은 인터넷으로 연결된다.
- 하나는 클라이언트, 하나는 서버
	. 클라이언트는 서버의 주소(위치)를 알아야 한다.
File I/O와 거의 같다.
- Open => Connect/Accept
- Read => Recv
- Write => Send
- Close => CloseSocket

네트워크 프로그래밍 단계
- 클라이언트
	. 소켓 생성
	. 서버 소켓 연결
	. Data 송/수신
	. 소켓 끊기
- 서버
	. 소켓 생성
	. 소켓 묶기
	. 소켓 접속 대기
	. 연결 소켓 생성
	. Data 송/수신
	. 소켓 끊기