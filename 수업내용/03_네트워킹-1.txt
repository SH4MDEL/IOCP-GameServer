네트워크
- Routing
- Domain Name
- TCP/UDP
- IPv4/IPv6

인터넷은 4개의 레이어로 구현된다.
6개짜리는 아무짝에도 쓸모 없다. (안쓴다)
- Application
	. 우리가 작성하는 프로그램, 게임 클라이언트, 게임 서버
- Transport
	. Application에 데이터를 전달해 주는 API
	. TCP, UDP
- Network
	. 주소를 보고, 컴퓨터(목적지)까지 안내해 주는 시스템
	. IPv4, IPv6
- Data Link
	. 컴퓨터와 컴퓨터를 연결하는 물리적인 규격
	. Ethernet, PPP, FDDI, LTE/5G, WIFI
각각의 레이어마다 헤더를 붙여 데이터의 정보를 확인하게 한다.
포장지를 붙인다.


패킷
- 인터넷 표준에서의 패킷
	. 레이어에서 다루는 데이터의 단위
	  - 레이어마다 한번에 다룰 수 있는 데이터의 최대 크기가 있음.
	. 각 레이어에서 필요한 정보가 추라됨(헤더)
	. 패킷은 독립적이어야 함. 
	  앞/뒤의 데이터를 보지 않아도 전달할 곳을 알 수 있어야 함.
- Application에서의 패킷
	. 구분을 위해 다른 이름으로 부르는 사람도 많음 (메시지, 데이터 블록..)
	. 구현의 편의를 위해 프로그래머가 나누어 놓은 데이터의 단위
	. 패킷은 독립적이어야 함.
	  앞/뒤의 데이터를 보지 않아도 전달할 곳을 알 수 있어야 함.

MMO 패킷의 특징
- 종류가 많다
	. 이동, 아이템사용, 평타, 채팅, 몬스터 공격, 경매
- 다음에 어떤 패킷이 올지 알 수 없다.
	. 모든 패킷을 한번씩 순서대로 보낼 수 없다.
- 패킷마다 크기가 다 다르다.
	. 제일 큰 패킷의 크기로 통일하면 => 네트워크 낭비
- 따라서, 패킷을 받았을 때 패킷의 종류와 크기를 알 수 있어야 한다.
	. 패킷 맨 앞에 크기와, 종류를 먼저 적어야 한다.
	. 종류뿐 아니라 크기도 알아야 하는 이유 => 채팅

프로토콜
- 클라이언트와 서버가 주고 받는 데이터의 포맷과 순서를 정의
- 패킷 포맷 정의가 핵심
- MMO에서 수많은 종류의 Packet이 존재
	. 로그인, 캐릭터 선택, 이동, 아이템 사용, 채팅, 평타...
- 주의점: 수정은 클라이언트와 서버가 동시에 이루어져야 한다.

프로토콜 정의 방식
- Binary Format
	. Byte 단위로 값의 의미를 정의
	. 관리가 까다로움, 언어/운영체제/컴파일러에 구애받지 않음.
	. Endian만 주의하면 됨.
- Structure Format
	. C의 구조체를 정의해서 공유
	. 관리가 쉬움, 언어/운영체제/컴파일러에 구애받는다.
- SDK 사용
	. 프로토콜의 정의와 해석을 도와주는 유틸리티
	. OpenSource : Protocol Buffer, Flat Buffer
	. 웹에서는 XML이나 Javascript도 많이 사용

패킷 재조립
- 인터넷 표준에서의 패킷 ≠ Application에서의 패킷
- 100바이트 + 100바이트 + 100바이트를 보냈을 때
  상대쪽에서 어떠한 조합으로 도착할지 알 수 없다.
	. 받는 쪽에서의 패킷 재조립이 필요하다.


소켓 프로그래밍

기본은 두 개의 프로그램이 서로 데이터를 주고받는 것
- 두 개의 프로그램은 인터넷으로 연결된다.
- 하나는 클라이언트, 하나는 서버
	. 클라이언트는 서버의 주소(위치)를 알아야 한다.
File I/O와 거의 같다.
- Open => Connect/Accept
- Read => Recv
- Write => Send
- Close => CloseSocket

네트워크 프로그래밍 단계
- 클라이언트
	. 소켓 생성
	. 서버 소켓 연결
	. Data 송/수신
	. 소켓 끊기
- 서버
	. 소켓 생성
	. 소켓 묶기(Bind)
	. 소켓 접속 대기(Listen)
	. 연결 소켓 생성(Accept)
	. Data 송/수신
	. 소켓 끊기


표준 socket API
너무 과거에 나온 표준이기 때문에 대용량 프로그래밍에 부적합.
- socket(), connect(), accept(), send(), recv()

윈도우 전용 socket API
리눅스에서는 사용할 수 없음. Boost/Asio 사용.
- WSASocket(), WSAConnect(), WSAAccept(), WSASend(), WSARecv()

섞어서 사용해도 지금은 문제 없지만, 나중에 문제가 생김.


- WSASocket
	. af : address family
	  - AF_INET만 사용
	. type : 소켓의 타입
	  - tcp를 위해 SOCK_STREAM사용
	  - (udp는 SCOK_DGRAM)
	. protocol : 사용할 프로토콜 종류
	  - IPPROTO_TCP
	. dwFlags : 소켓의 속성
	  - 0 또는 WSA_PROTOCOL_OVERLAPPED
- WSAConnect
	. s : 소켓
	. name : sockaddr 구조체의 주소
	. namelen : 길이
- sockaddr 구조체
	. 네트워크 주소를 저장
	  - IP 주소와 PORT 번호
	. 빅 엔디안, 리틀 엔디안
	  메모리는 1바이트 단위로 저장되지만, CPU는 여러 메모리를 한번에
	  초기화할 수 있는 장치를 제공한다.
	  intel 계열 CPU는 이를 거꾸로 저장한다. 1234 -> 4321
	  컴퓨터 내부에서 사용할 때는 문제가 없지만, 
	  네트워크를 통해 다른 컴퓨터로 전송할 때 문제가 생길 수 있다.
	. inet_pton => pointer to network
- WSARecv
	. s : 소켓
	. lpBuffers : 받는 데이터를 저장할 버퍼
	. dwBufferCount : 버퍼의 개수
	. lpFlags : 동작 옵션(MSG_PEEK, MSG_OOB(높은 우선순위))
	. IpNumberofBytesRecvd : 받은 데이터의 크기
- WSABUF
	. 흩어진 데이터를 관리하는 구조
	. 성능 저하의 주범인 데이터 복사를 줄여줌
	. gather/scatter I/O라고 불림
	. 버퍼 여러 개를 한 번에 보내고 받기 위함

	WSABUF buf[3]
	WSASend(s, buf, 3)

Port 묶기
- 포트를 선점해서 다른 프로그램이 사용하지 못하도록 한다.
- 원하는 프로그램에서 오는 접속만 받을 수도 있다. (이는 게임서버에서는 큰 필요 없다.)
- int bind
	. s : 소켓
	. name, namelen : 상대 소켓 주소, 주소 길이
	  - INADDR_ANY로 전체 주소로부터의 접속을 허용

Socket 접속 대기
- 소켓이 접속을 받을 수 있도록 만든다
- int listen
	. s : 소켓
	. backlog : 접속 대기 큐의 최대 연결 가능 숫자
	  - 서버에 도착한 후 accept될 때 까지 기다리고 있는
	    소켓연결의 최대 개수
	  - 싱글 쓰레드 프로그램에서는 5정도가 적당
	  - 대용량 서버는 20-200, 또는 SOMAXCONN
	  - 최신 API는 안 쓰기도 함 (디폴트가 SOMAXCONN)

연결 Socket 생성
- 연결된 소켓을 만든다
- WSAAccept
	. s : listen을 하고 있는 소켓
	. name, addrlen : 연결된 상태 소켓의 주소
	. lpfnCondition : 연결 거절을 판단하는 함수 (보통 nullptr)
	. dwCallbackData : IpfnCondition에 들어갈 값
	. return : 데이터 전송용 소켓

IPv6
. 현재 사용하고 있는 IPv4는 네트워크 주소가 모자람
. IPv6가 새로운 표준
. 옛날 기계와 옛날 소프트웨어는 IPv4만 인식
. IPv4와 다른 프로토콜을 사용하기 때문에 서로 통신 안 됨
	- 소켓 프로그래밍 API는 같음, 프로토콜만 다름